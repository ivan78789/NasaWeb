<?php
/**
 * Web Push Notifications Service
 * –û—Ç–ø—Ä–∞–≤–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Web Push API
 */

class PushNotificationService {
    private $conn;
    private $vapid_public_key;
    private $vapid_private_key;
    private $vapid_subject;
    
    public function __construct($database_connection) {
        $this->conn = $database_connection;
        $this->vapid_public_key = VAPID_PUBLIC_KEY;
        $this->vapid_private_key = VAPID_PRIVATE_KEY;
        $this->vapid_subject = VAPID_SUBJECT;
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    public function sendPushNotification($device_token, $title, $body, $data = []) {
        try {
            // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Web Push (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É)
            $payload = json_encode([
                'title' => $title,
                'body' => $body,
                'icon' => '/assets/img/icon-192.png',
                'badge' => '/assets/img/badge-72.png',
                'data' => $data,
                'actions' => [
                    [
                        'action' => 'view',
                        'title' => '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
                    ],
                    [
                        'action' => 'close',
                        'title' => '–ó–∞–∫—Ä—ã—Ç—å'
                    ]
                ]
            ]);
            
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Web Push API
            // –î–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            error_log("Push notification sent to {$device_token}: {$title}");
            
            return true;
            
        } catch (Exception $e) {
            error_log("Push notification error: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
     */
    public function sendCriticalAlert($alert) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            $sql = "SELECT ud.*, s.category_alerts 
                    FROM user_devices ud 
                    LEFT JOIN subscriptions s ON ud.user_id = s.user_id 
                    WHERE ud.latitude IS NOT NULL 
                    AND ud.longitude IS NOT NULL 
                    AND (s.category_alerts = 1 OR s.category_alerts IS NULL)
                    AND (
                        6371 * acos(
                            cos(radians(?)) * cos(radians(ud.latitude)) * 
                            cos(radians(ud.longitude) - radians(?)) + 
                            sin(radians(?)) * sin(radians(ud.latitude))
                    ) <= ?";
            
            $stmt = $this->conn->prepare($sql);
            $stmt->execute([
                $alert['latitude'],
                $alert['longitude'],
                $alert['latitude'],
                $alert['radius_km']
            ]);
            
            $devices = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $sent = 0;
            $failed = 0;
            
            foreach ($devices as $device) {
                $title = "üö® " . $this->getAlertTitle($alert);
                $body = $alert['message_ru'] ?: $alert['message_en'];
                
                if ($this->sendPushNotification($device['push_token'], $title, $body, [
                    'alert_id' => $alert['id'],
                    'type' => $alert['type'],
                    'severity' => $alert['severity']
                ])) {
                    $sent++;
                } else {
                    $failed++;
                }
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            $this->logNotification($alert['id'], count($devices), $sent, $failed);
            
            return [
                'total' => count($devices),
                'sent' => $sent,
                'failed' => $failed
            ];
            
        } catch (Exception $e) {
            error_log("Critical alert sending error: " . $e->getMessage());
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
     */
    private function getAlertTitle($alert) {
        $titles = [
            'earthquake' => '–ó–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ',
            'fire' => '–ü–æ–∂–∞—Ä',
            'flood' => '–ù–∞–≤–æ–¥–Ω–µ–Ω–∏–µ',
            'storm' => '–®—Ç–æ—Ä–º',
            'air_quality' => '–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞',
            'other' => '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ'
        ];
        
        return $titles[$alert['type']] ?? '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ';
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    private function logNotification($alert_id, $recipients, $sent, $failed) {
        try {
            $sql = "INSERT INTO audit_logs (alert_id, recipients_count, delivered_count, failed_count, payload) VALUES (?, ?, ?, ?, ?)";
            $stmt = $this->conn->prepare($sql);
            $stmt->execute([
                $alert_id,
                $recipients,
                $sent,
                $failed,
                json_encode(['timestamp' => date('Y-m-d H:i:s')])
            ]);
        } catch (Exception $e) {
            error_log("Logging error: " . $e->getMessage());
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    public function sendTestNotification($device_token) {
        return $this->sendPushNotification(
            $device_token,
            "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Disaster Alert",
            ['test' => true]
        );
    }
}
?>
